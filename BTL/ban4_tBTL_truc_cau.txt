//Chương trình vẽ 1 hình lập phương đơn vị theo mô hình lập trình OpenGL hiện đại

#include "Angel.h"  /* Angel.h là file tự phát triển (tác giả Prof. Angel), có chứa cả khai báo includes glew và freeglut*/


// remember to prototype
void generateGeometry(void);
void initGPUBuffers(void);
void shaderSetup(void);
void display(void);
void keyboard(unsigned char key, int x, int y);


typedef vec4 point4;
typedef vec4 color4;
using namespace std;

// Số các đỉnh của các tam giác
const int NumPoints = 36;

point4 points[NumPoints]; /* Danh sách các đỉnh của các tam giác cần vẽ*/
color4 colors[NumPoints]; /* Danh sách các màu tương ứng cho các đỉnh trên*/


point4 vertices[8]; /* Danh sách 8 đỉnh của hình lập phương*/
color4 vertex_colors[8]; /*Danh sách các màu tương ứng cho 8 đỉnh hình lập phương*/

GLuint program, loc_model, projection;
mat4 model;
mat4 mv;
GLfloat l = -1.0, r = 1.0;
GLfloat bottom = -1.0, top = 1.0;
GLfloat zNear = 0.5, zFar = 3.0;
mat4 instance;
mat4 model_khuan; // phep bien doi co ban trên bộ phận máy cẩu
GLfloat dai = 0.8, kim_dai = 0.15, goc_quay = 30, goc_quayy = 0, goc_quay_banh_xe = 0, goc_quay_truc_cau=-45;
GLfloat day = 0.05;
GLfloat dich = 0;
void initCube()
{
	// Gán giá trị tọa độ vị trí cho các đỉnh của hình lập phương
	vertices[0] = point4(-0.5, -0.5, 0.5, 1.0);
	vertices[1] = point4(-0.5, 0.5, 0.5, 1.0);
	vertices[2] = point4(0.5, 0.5, 0.5, 1.0);
	vertices[3] = point4(0.5, -0.5, 0.5, 1.0);
	vertices[4] = point4(-0.5, -0.5, -0.5, 1.0);
	vertices[5] = point4(-0.5, 0.5, -0.5, 1.0);
	vertices[6] = point4(0.5, 0.5, -0.5, 1.0);
	vertices[7] = point4(0.5, -0.5, -0.5, 1.0);

	// Gán giá trị màu sắc cho các đỉnh của hình lập phương	
	vertex_colors[0] = color4(0.0, 0.0, 0.0, 1.0); // black
	vertex_colors[1] = color4(1.0, 0.0, 0.0, 1.0); // red
	vertex_colors[2] = color4(1.0, 1.0, 0.0, 1.0); // yellow
	vertex_colors[3] = color4(0.0, 1.0, 0.0, 1.0); // green
	vertex_colors[4] = color4(0.0, 0.0, 1.0, 1.0); // blue
	vertex_colors[5] = color4(1.0, 0.0, 1.0, 1.0); // magenta
	vertex_colors[6] = color4(1.0, 1.0, 1.0, 1.0); // white
	vertex_colors[7] = color4(0.0, 1.0, 1.0, 1.0); // cyan
}
int Index = 0;
void quad(int a, int b, int c, int d)  /*Tạo một mặt hình lập phương = 2 tam giác, gán màu cho mỗi đỉnh tương ứng trong mảng colors*/
{
	colors[Index] = vertex_colors[a]; points[Index] = vertices[a]; Index++;
	colors[Index] = vertex_colors[b]; points[Index] = vertices[b]; Index++;
	colors[Index] = vertex_colors[c]; points[Index] = vertices[c]; Index++;
	colors[Index] = vertex_colors[a]; points[Index] = vertices[a]; Index++;
	colors[Index] = vertex_colors[c]; points[Index] = vertices[c]; Index++;
	colors[Index] = vertex_colors[d]; points[Index] = vertices[d]; Index++;
}
void makeColorCube(void)  /* Sinh ra 12 tam giác: 36 đỉnh, 36 màu*/

{
	quad(1, 0, 3, 2);
	quad(2, 3, 7, 6);
	quad(3, 0, 4, 7);
	quad(6, 5, 1, 2);
	quad(4, 5, 6, 7);
	quad(5, 4, 0, 1);
}
void generateGeometry(void)
{
	initCube();
	makeColorCube();
}


void initGPUBuffers(void)
{
	// Tạo một VAO - vertex array object
	GLuint vao;
	glGenVertexArrays(1, &vao);
	glBindVertexArray(vao);

	// Tạo và khởi tạo một buffer object
	GLuint buffer;
	glGenBuffers(1, &buffer);
	glBindBuffer(GL_ARRAY_BUFFER, buffer);
	glBufferData(GL_ARRAY_BUFFER, sizeof(points) + sizeof(colors), NULL, GL_STATIC_DRAW);

	glBufferSubData(GL_ARRAY_BUFFER, 0, sizeof(points), points);
	glBufferSubData(GL_ARRAY_BUFFER, sizeof(points), sizeof(colors), colors);

}

void shaderSetup(void)
{
	// Nạp các shader và sử dụng chương trình shader
	program = InitShader("vshader1.glsl", "fshader1.glsl");   // hàm InitShader khai báo trong Angel.h
	glUseProgram(program);

	// Khởi tạo thuộc tính vị trí đỉnh từ vertex shader
	GLuint loc_vPosition = glGetAttribLocation(program, "vPosition");
	glEnableVertexAttribArray(loc_vPosition);
	glVertexAttribPointer(loc_vPosition, 4, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(0));

	GLuint loc_vColor = glGetAttribLocation(program, "vColor");
	glEnableVertexAttribArray(loc_vColor);
	glVertexAttribPointer(loc_vColor, 4, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(sizeof(points)));
	loc_model = glGetUniformLocation(program, "model");
	projection = glGetUniformLocation(program, "projection");
	glEnable(GL_DEPTH_TEST);
	glClearColor(1.0, 1.0, 1.0, 1.0);        /* Thiết lập màu trắng là màu xóa màn hình*/
}

GLuint MakeCylinder(const float& radius, const float& length)
{
	GLuint dp_list;
	dp_list = glGenLists(1);
	glNewList(dp_list, GL_COMPILE);
	GLUquadricObj* quadratic_obj;
	quadratic_obj = gluNewQuadric();
	glRotatef(-90, 1.0, 0.0, 0.0);
	gluCylinder(quadratic_obj, radius, radius, length, 32, 32);
	glEndList();
	return dp_list;
}


void khuan(GLfloat w, GLfloat h, GLfloat l)
{
	//instance = Translate(0,h/2,0)*Scale(w, h, l);
	instance = Scale(w, h, l);
	glUniformMatrix4fv(loc_model, 1, GL_TRUE, mv * model * model_khuan * instance);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);

}

GLfloat may_cau = 0.2;   // chiều dài tượng trưng cho sàn máy cẩu
GLfloat cr_may_cau = may_cau * 1.2;  // chiều rộng  tượng trưng cho sàn máy cẩu
GLfloat cr_san_may_cau = may_cau * 1.8;
GLfloat cd_may_cau = may_cau * 4;   // chiều dài = 3 rộng  tượng trưng cho sàn máy cẩu
GLfloat do_day_vat_lieu = may_cau * 0.1;  // độ dày các miếng ván

GLfloat cr_dau_may_cau = cr_san_may_cau; // cho đầu rộng hơn sàn
GLfloat cd_dau_may_cau = cr_san_may_cau;
GLfloat cc_dau_may_cau = cr_may_cau*0.8; // chiều cao đầu máy cẩu

GLfloat cr_zip_gam_xe_truoc = cr_may_cau * 0.15;
GLfloat cd_zip_gam_xe_truoc = cd_may_cau / 4;

GLfloat cr_zip_gam_xe_sau = cr_may_cau * 0.15;
GLfloat cd_zip_gam_xe_sau = cd_may_cau / 4*2;
GLfloat cc_zip_gam_xe = do_day_vat_lieu * 0.5;

GLfloat dg_kinh_banh_xe = cr_may_cau / 3;
GLfloat cc__banh_xe = cr_may_cau / 3;


GLfloat cc_thung_hang = cr_may_cau / 3; // chiều cao  gia do hang sau thung
// truc cau
GLfloat cc_truc_cau = cd_may_cau;
GLfloat cr_truc_cau = cr_dau_may_cau / 4;
void khuan_zip_xe(GLfloat w, GLfloat h, GLfloat l, GLfloat cr_zip_gam_xe , GLfloat cd_zip_gam_xe )
// khuan tạo thanh zip trên xe
{
	mat4 vitri = Translate(w, h, l);

	model_khuan = vitri * Translate(0, -do_day_vat_lieu, 0);
	khuan(cd_zip_gam_xe, cc_zip_gam_xe, cr_zip_gam_xe); // thanh zip dai nhat

	model_khuan = vitri * Translate(0, -(do_day_vat_lieu + cc_zip_gam_xe), 0);    // giảm chiều dài *0.8, dịch lên trên thanh dai nhat
	khuan(cd_zip_gam_xe * 0.8, cc_zip_gam_xe, cr_zip_gam_xe); // thanh zip t2

	model_khuan = vitri * Translate(0, -(do_day_vat_lieu + cc_zip_gam_xe * 2), 0);
	khuan(cd_zip_gam_xe * 0.7, cc_zip_gam_xe, cr_zip_gam_xe); //

	model_khuan = vitri * Translate(0, -(do_day_vat_lieu + cc_zip_gam_xe * 3), 0);
	khuan(cd_zip_gam_xe * 0.6, cc_zip_gam_xe, cr_zip_gam_xe); // thanh zip ngan nhat

	model_khuan = vitri * Translate(0, -(do_day_vat_lieu + cc_zip_gam_xe * 3), 0);
	khuan(cr_zip_gam_xe + 0.01, cc_zip_gam_xe, cr_zip_gam_xe); // thanh zip ngan nhat
}
void khuan_truc_banh_xe(GLfloat w, GLfloat h, GLfloat l) /// 3 truc gan 6 banh xe
{
	mat4 vitri = Translate(w, h, l);
	model_khuan = vitri * Translate(0, -(do_day_vat_lieu + cc_zip_gam_xe * 5), 0) * RotateY(90); // dịch truc ve 2 zip 
	khuan(cr_may_cau + 0.05, cc_zip_gam_xe, cc_zip_gam_xe);
}




void khuan_banh_xe(GLfloat w, GLfloat h, GLfloat l, int n) // n la so hinh
{
	mat4 vitri = Translate(w, h, l);

	for (int i = 0; i < n; i++)
	{
		int rotate = 360 / n * i;
		model_khuan = vitri * Translate(0, -(do_day_vat_lieu + cc_zip_gam_xe * 5), 0) * RotateZ(rotate+ goc_quay_banh_xe);  // dich truc x 1 doan bang voi zip be nhat //
		khuan(dg_kinh_banh_xe, dg_kinh_banh_xe, cc__banh_xe); // thanh zip dai nhat
	}
}
void khuan_gam_xe()
{
	GLfloat dichXvesau = -cd_may_cau / 2 - cd_zip_gam_xe_truoc / 2;   /// tac dung dich toan bo khung banh xe truoc
	GLfloat dichZvetruoc = -cr_may_cau / 2 + cr_zip_gam_xe_truoc / 2;
 // zip xe sau sau
	khuan_zip_xe(-dichXvesau, 0, dichZvetruoc,cr_zip_gam_xe_truoc,cd_zip_gam_xe_truoc); // zip xe sau truoc
	khuan_zip_xe(-dichXvesau, 0, -dichZvetruoc , cr_zip_gam_xe_truoc, cd_zip_gam_xe_truoc); // zip xe sau truoc
	
	khuan_truc_banh_xe(-dichXvesau, 0, 0);
	khuan_banh_xe(-dichXvesau, 0, (dichZvetruoc - 0.055), 100);
	khuan_banh_xe(-dichXvesau, 0, -(dichZvetruoc - 0.055), 100);

	//// BỘ TRUC XE SAU
	// tang kich thuoc cua zip de banh sau cho 2 truc   ?? VI Dang sau co 2 truc nen phải gap doi cac thong so nen
	 
	GLfloat dichXvesau_banh_sau = -cd_may_cau / 2 + cd_zip_gam_xe_sau / 2; /// tac dung dich toan bo khung banh xe sau
	GLfloat dichZvetruoc_banh_sau = -cr_may_cau / 2 + cr_zip_gam_xe_sau / 2;
	khuan_zip_xe(dichXvesau_banh_sau, 0, dichZvetruoc_banh_sau, cr_zip_gam_xe_sau, cd_zip_gam_xe_sau ); // zip xe sau sau
	khuan_zip_xe(dichXvesau_banh_sau, 0, -dichZvetruoc_banh_sau, cr_zip_gam_xe_sau , cd_zip_gam_xe_sau );

	// trucbanh xe cuoi
	khuan_truc_banh_xe(dichXvesau_banh_sau - cd_zip_gam_xe_sau / 4, 0, 0);   // chia đôi zip để tao 2 truc banh xe
	
	khuan_banh_xe(dichXvesau_banh_sau - cd_zip_gam_xe_sau / 4, 0, (dichZvetruoc_banh_sau - 0.055), 100);   // banh xe cuoi   them 0.055 vi de banh xe lui ra ngoai ko cham vao truc
	khuan_banh_xe(dichXvesau_banh_sau - cd_zip_gam_xe_sau / 4, 0, -(dichZvetruoc_banh_sau - 0.055), 100);  // banh xe cuoi 
	
	// truc banh xe giua
	khuan_truc_banh_xe(dichXvesau_banh_sau + cd_zip_gam_xe_sau / 5, 0, 0);
	khuan_banh_xe(dichXvesau_banh_sau + cd_zip_gam_xe_sau / 5, 0, (dichZvetruoc_banh_sau - 0.055), 100);   // banh xe giua
	khuan_banh_xe(dichXvesau_banh_sau + cd_zip_gam_xe_sau / 5, 0, -(dichZvetruoc_banh_sau - 0.055), 100);

	// ĐỘNG CƠ   // thong so đong co cd = cr = (cd_dau_may_cau/3 , cc = dg_kinh_banh_xe/1.5
	model_khuan =Translate(cd_dau_may_cau/2, -dg_kinh_banh_xe /1.5, 0); // Dong co 1 hinh vuong
	khuan(cd_dau_may_cau/3, dg_kinh_banh_xe/1.5 -0.01, cd_dau_may_cau / 3);     // tru 0.01 cho thap xuong so voi dong co hình chữ nhập
	model_khuan = Translate(cd_dau_may_cau/2 + cd_dau_may_cau / 3/2 , -dg_kinh_banh_xe/1.5, 0) * RotateY(90); // Dong co 1 hinh chu nhat // cd_dau_may_cau / 3/2 la dich len 1 nua dong co hinhg vuong // xoay 90 cho thanh hcn
	khuan(cd_dau_may_cau / 2, dg_kinh_banh_xe / 1.5, cd_dau_may_cau / 3);

	// Khuân nối 2 bánh xe sau

	model_khuan = Translate(- cd_dau_may_cau / 2 , -dg_kinh_banh_xe, 0); // 
	khuan(cd_dau_may_cau / 1.2, dg_kinh_banh_xe / 2, cd_dau_may_cau / 4);//

	// Truc truyền chuyển động
	model_khuan =   Translate(0, -(do_day_vat_lieu + cc_zip_gam_xe * 5), 0) ; // truc doc 
	khuan(cr_may_cau + 0.05, cc_zip_gam_xe, cc_zip_gam_xe);

	//khoa truc  nam giũa truc xoay để thể hiện khớp nối quay
	model_khuan = Translate(0, -(do_day_vat_lieu + cc_zip_gam_xe * 5), 0) * RotateX(goc_quay_banh_xe); // năm giữa trục doc
	khuan(cc_zip_gam_xe*2, cc_zip_gam_xe*4, cc_zip_gam_xe * 2);

}
void DauMayCau()
{
	//model_khuan = identity();
	mat4 dich_dau_ra_dau = Translate(cd_may_cau / 2 + cd_dau_may_cau / 2 , 0, 0);

	model_khuan = dich_dau_ra_dau * Translate(0, do_day_vat_lieu, 0);// Dịch đầu máy cẩu trên sàn 
	khuan(cr_dau_may_cau, do_day_vat_lieu, cr_dau_may_cau);

	model_khuan = dich_dau_ra_dau * Translate(-cd_dau_may_cau / 2, cr_dau_may_cau/2,0); // mặt sau
	khuan( do_day_vat_lieu, cr_dau_may_cau, cr_dau_may_cau);

	model_khuan = dich_dau_ra_dau * Translate(+cd_dau_may_cau / 2, cr_dau_may_cau / 4, 0); // mặt truoc  // chieu cao là cr_dau_may_cau/2 thi translate xuong 1 doan /4
	khuan(do_day_vat_lieu, cr_dau_may_cau/2, cr_dau_may_cau);


	model_khuan = Translate(cd_may_cau / 2 + cd_dau_may_cau, cr_dau_may_cau / 2, 0) * RotateZ(40) *Translate(0, cr_dau_may_cau/1.5/2 , 0) ; // mặt kinh  // dịch len cao  roi moi dịch ra dau
	khuan(do_day_vat_lieu, cr_dau_may_cau / 1.5, cr_dau_may_cau);                                                    // doan dich nayf dich bang 1 nua chieu cao khuan

	model_khuan = dich_dau_ra_dau * Translate(-cd_dau_may_cau / 2+ cr_dau_may_cau * 0.3, cr_dau_may_cau , 0); // mặt trên
	khuan(cr_dau_may_cau*0.6, do_day_vat_lieu, cr_dau_may_cau);    // * 0.5 ép bé đi so voi mat duoi



	model_khuan = dich_dau_ra_dau * Translate(0, cr_dau_may_cau / 4, cr_dau_may_cau / 2);// mawt phải
	khuan(cr_dau_may_cau, cr_dau_may_cau/2, do_day_vat_lieu);

	model_khuan = dich_dau_ra_dau * Translate(0, cr_dau_may_cau / 4, -cr_dau_may_cau / 2); //măt trai
	khuan(cr_dau_may_cau, cr_dau_may_cau/2, do_day_vat_lieu);

	//Den xe

	model_khuan = dich_dau_ra_dau * Translate(+cd_dau_may_cau / 2 + do_day_vat_lieu , cr_dau_may_cau / 2 / 6/2, cr_dau_may_cau/2 - cr_dau_may_cau  / 6 / 2); // den xe phai //  cr_dau_may_cau / 2 / 6/2 laf 1 nua kich thuoc den // dich ra giua nhuw mat truoc roi sacele -> transl
	khuan(do_day_vat_lieu/6, cr_dau_may_cau / 2/6, cr_dau_may_cau/6);

	model_khuan = dich_dau_ra_dau * Translate(+cd_dau_may_cau / 2 + do_day_vat_lieu, cr_dau_may_cau / 2 / 6 / 2,-( cr_dau_may_cau / 2 - cr_dau_may_cau / 6 / 2)); // den xe trai
	khuan(do_day_vat_lieu / 6, cr_dau_may_cau / 2 / 6, cr_dau_may_cau / 6);
}
GLfloat truot_bac_2 = 0;
GLfloat truot_bac_3 = 0; // thanh truot 3
void TrucCau()
{
	// thung hang cố định trục cẩu
	// thugn hang 1
	model_khuan = Translate(-cd_dau_may_cau +0.05 , cc_thung_hang /2, 0); // lui thung hang ve cuoi xe
	khuan(cd_dau_may_cau / 2, cc_thung_hang ,cr_dau_may_cau ); 
	// thùng hang 2
	model_khuan = Translate(-cd_dau_may_cau + +0.05+ cd_dau_may_cau / 2, cc_thung_hang / 2, cr_dau_may_cau / 4); // thung hang 2 // lui ve truoc 1 đoạn = cr thung hàng 1 
	khuan(cd_dau_may_cau / 2, cc_thung_hang, cr_dau_may_cau/2);// 

	//Cần cẩu 
	//truc bac 1
	//phan cap
	mat4 dieu_khien = RotateZ(goc_quay_truc_cau) * Translate(0, cc_truc_cau / 2, 0); // điều kiển nâng hạ cần cẩu + dich len 1 doan 1 nua can cau cap 1
	model_khuan = Translate(-cd_dau_may_cau + cr_truc_cau / 2, cc_thung_hang / 2, cr_dau_may_cau / 4)* dieu_khien ; // lui thung hang ve cuoi xe
	khuan(cr_truc_cau, cc_truc_cau, cr_truc_cau);

	// truc bac 2
	dieu_khien *= Translate(0, truot_bac_2, 0);  // dieu khien ra vao truc bac 2 , khoogn cần dịch y 1 đoạn cc_truc_cau / 2 vì đã dịch truc 1 rồi => phân cấp
	model_khuan = Translate(-cd_dau_may_cau + cr_truc_cau / 2, cc_thung_hang / 2, cr_dau_may_cau / 4)* dieu_khien; // lui thung hang ve cuoi xe
	khuan(cr_truc_cau*0.8, cc_truc_cau * 1.2, cr_truc_cau * 0.8);  // *0.8 giam kich thuoc cho vừa trong truc bac 1

	// truc bac 2
	dieu_khien *= Translate(0,  truot_bac_3, 0);
	model_khuan = Translate(-cd_dau_may_cau + cr_truc_cau / 2, cc_thung_hang / 2, cr_dau_may_cau / 4)* dieu_khien; // lui thung hang ve cuoi xe
	khuan(cr_truc_cau * 0.6, cc_truc_cau * 1.4, cr_truc_cau * 0.6);  // *0.8 giam kich thuoc cho vừa trong truc bac 2
}
void MayCau()
{
	model_khuan = identity();
	khuan(cd_may_cau + 0.08, do_day_vat_lieu, may_cau  * 1.8); // mặt sàn

	khuan_gam_xe();
	DauMayCau();
	TrucCau();
}
void chieu() {
	point4 eye(1, 1, -1.5, 1);
	point4 at(0.0, 0.0, 0.0, 1.0);
	vec4 up(0.0, 1.0, 0.0, 1.0);
	mv = LookAt(eye, at, up);
	glUniformMatrix4fv(loc_model, 1, GL_TRUE, mv);
	mat4 p = Frustum(l, r, bottom, top, zNear, zFar);
	glUniformMatrix4fv(projection, 1, GL_TRUE, p);
}
void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	//chieu();
	model = Translate(dich, 0, 0) * RotateX(-30) * RotateY(goc_quay) * RotateZ(goc_quayy);
	MayCau();
	MakeCylinder(30, 20);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);    /*Vẽ các tam giác*/
	glutSwapBuffers();

}


void keyboard(unsigned char key, int x, int y)
{


	switch (key) {
	case 033: // Escape Key


	case 'p':
		dich -= dai / 10;
		glutPostRedisplay();
		break;
	case 't':
		dich += dai / 10;
		glutPostRedisplay();
		break;
	case '2':
		goc_quay += 30;
		if (goc_quay > 360)
			goc_quay -= 360;
		glutPostRedisplay();
		break;
	case '1':
		goc_quayy += 30;
		if (goc_quayy > 360)
			goc_quayy -= 360;
		glutPostRedisplay();
		break;
	case '3':
		goc_quay_banh_xe -= 15;
		if (goc_quay_banh_xe < -360)
			goc_quay_banh_xe += 360;
		glutPostRedisplay();
		break;
	case '4':
		if (goc_quay_truc_cau-15 < -70 || goc_quay_truc_cau +15 > 75)  // không cho trục hạ thấp 
			break;
		goc_quay_truc_cau -= 15;
		if (goc_quay_truc_cau < -360)
			goc_quay_truc_cau += 360;
		cout << goc_quay_truc_cau << endl;
		glutPostRedisplay();
		break;
	case '5':
		if (truot_bac_2 + 0.03 > cc_truc_cau*0.5)
			break;
		truot_bac_2 += 0.03;
		glutPostRedisplay();
		break;
	case '6':
		if (truot_bac_2 - 0.03 < 0)
			break;
		truot_bac_2 -= 0.03;
		glutPostRedisplay();
		break;
	case '7':
		if (truot_bac_3 + 0.03 > cc_truc_cau * 0.5)
			break;
		truot_bac_3 += 0.03;
		glutPostRedisplay();
		break;
	case '8':
		if (truot_bac_3 - 0.03 < 0)
			break;
		truot_bac_3 -= 0.03;
		glutPostRedisplay();
		break;

	}
	glutPostRedisplay();
}


int main(int argc, char** argv)
{
	// main function: program starts here

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowSize(640, 640);
	glutInitWindowPosition(100, 150);
	glutCreateWindow("Drawing a Cube");


	glewInit();

	generateGeometry();
	initGPUBuffers();
	shaderSetup();

	glutDisplayFunc(display);
	glutKeyboardFunc(keyboard);

	glutMainLoop();
	return 0;
}
